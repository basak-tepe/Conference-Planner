Building a to-do list app with a calendar using Spring Boot, MongoDB, and Docker is a great project idea. To get started, you'll need to follow these general steps:

1. Set up your development environment:
   - Install Java Development Kit (JDK) for Spring Boot development.
   - Install Docker to containerize your application.
   - Install MongoDB for data storage.
   - Set up your preferred Integrated Development Environment (IDE).

2. Create a new Spring Boot project:
   - Use Spring Initializr or your IDE to create a new Spring Boot project.
   - Configure the necessary dependencies, such as Spring Web, MongoDB, and any additional dependencies you may need for the user interface.

3. Define the data model:
   - Determine the structure of your to-do list and calendar events.
   - Create Java classes to represent tasks, events, and any other relevant entities.
   - Use Spring Data MongoDB to define data repositories and interact with the MongoDB database.

4. Implement the backend functionality:
   - Create controllers to handle HTTP requests and map them to appropriate methods.
   - Implement the necessary CRUD (Create, Read, Update, Delete) operations for tasks and events.
   - Define the necessary API endpoints for interacting with the to-do list and calendar.

5. Design the user interface:
   - Choose a frontend framework or library like React, Angular, or Vue.js to build the interactive interface.
   - Set up your frontend project and configure it to communicate with the backend API.
   - Implement components or views for managing tasks, events, and the calendar.

6. Connect the frontend and backend:
   - Use HTTP requests from the frontend to interact with the backend API.
   - Implement logic to handle data retrieval, creation, updating, and deletion.
   - Ensure data consistency between the frontend and backend by synchronizing the data models.

7. Containerize the application with Docker:
   - Write a Dockerfile to define the environment and dependencies for your application.
   - Build a Docker image of your application.
   - Run and test your containerized application locally using Docker.

8. Deploy your application:
   - Choose a hosting platform like AWS, Google Cloud, or Heroku.
   - Deploy your Docker container to the hosting platform.
   - Configure any necessary environment variables or settings for the deployed application.

Remember that this is a high-level overview, and there are many details to consider during each step. You may need to refer to specific documentation and tutorials for Spring Boot, MongoDB, Docker, and the frontend framework or library you choose.